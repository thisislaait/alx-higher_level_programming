"""
Test Documentation for matrix_mul Function
"""

def test_matrix_mul():
    """
    Test cases for the matrix_mul function.
    """
    # Test case 1: Basic multiplication with valid matrices
    matrix_a = [[1, 2, 3], [4, 5, 6]]
    matrix_b = [[7, 8], [9, 10], [11, 12]]
    result = matrix_mul(matrix_a, matrix_b)
    expected_result = [[58, 64], [139, 154]]
    assert result == expected_result, f"Expected {expected_result}, but got {result}"

    # Test case 2: Multiplication with a single-element matrix
    matrix_a = [[3]]
    matrix_b = [[4]]
    result = matrix_mul(matrix_a, matrix_b)
    expected_result = [[12]]
    assert result == expected_result, f"Expected {expected_result}, but got {result}"

    # Test case 3: Multiplication with matrices containing floating-point numbers
    matrix_a = [[1.5, 2.5], [3.5, 4.5]]
    matrix_b = [[2, 0], [1, 2]]
    result = matrix_mul(matrix_a, matrix_b)
    expected_result = [[6.25, 5.5], [14.25, 12.5]]
    assert result == expected_result, f"Expected {expected_result}, but got {result}"

    # Test case 4: Multiplication with an empty matrix (m_a)
    matrix_a = []
    matrix_b = [[1, 2], [3, 4]]
    try:
        matrix_mul(matrix_a, matrix_b)
    except ValueError as e:
        assert str(e) == "m_a can't be empty", f"Expected 'm_a can't be empty', but got {e}"

    # Test case 5: Multiplication with an empty matrix (m_b)
    matrix_a = [[1, 2], [3, 4]]
    matrix_b = []
    try:
        matrix_mul(matrix_a, matrix_b)
    except ValueError as e:
        assert str(e) == "m_b can't be empty", f"Expected 'm_b can't be empty', but got {e}"

    # Test case 6: Non-list input (m_a)
    matrix_a = 123
    matrix_b = [[1, 2], [3, 4]]
    try:
        matrix_mul(matrix_a, matrix_b)
    except TypeError as e:
        assert str(e) == "m_a must be a list", f"Expected 'm_a must be a list', but got {e}"

    # Test case 7: Non-list input (m_b)
    matrix_a = [[1, 2], [3, 4]]
    matrix_b = 456
    try:
        matrix_mul(matrix_a, matrix_b)
    except TypeError as e:
        assert str(e) == "m_b must be a list", f"Expected 'm_b must be a list', but got {e}"

    # Test case 8: Non-list of lists (m_a)
    matrix_a = [1, 2, 3]
    matrix_b = [[1, 2], [3, 4]]
    try:
        matrix_mul(matrix_a, matrix_b)
    except TypeError as e:
        assert str(e) == "m_a must be a list of lists", f"Expected 'm_a must be a list of lists', but got {e}"

    # Test case 9: Non-list of lists (m_b)
    matrix_a = [[1, 2], [3, 4]]
    matrix_b = [5, 6, 7]
    try:
        matrix_mul(matrix_a, matrix_b)
    except TypeError as e:
        assert str(e) == "m_b must be a list of lists", f"Expected 'm_b must be a list of lists', but got {e}"

    # Test case 10: Matrix containing non-numeric elements (m_a)
    matrix_a = [[1, 2], [3, 'abc']]
    matrix_b = [[1, 2], [3, 4]]
    try:
        matrix_mul(matrix_a, matrix_b)
    except TypeError as e:
        assert str(e) == "m_a should contain only integers or floats", f"Expected 'm_a should contain only integers or floats', but got {e}"

    # Test case 11: Matrix containing non-numeric elements (m_b)
    matrix_a = [[1, 2], [3, 4]]
    matrix_b = [[1, 2], [3, 'xyz']]
    try:
        matrix_mul(matrix_a, matrix_b)
    except TypeError as e:
        assert str(e) == "m_b should contain only integers or floats", f"Expected 'm_b should contain only integers or floats', but got {e}"

    # Test case 12: Rows of m_a with different sizes
    matrix_a = [[1, 2, 3], [4, 5]]
    matrix_b = [[1, 2], [3, 4]]
    try:
        matrix_mul(matrix_a, matrix_b)
    except TypeError as e:
        assert str(e) == "each row of m_a must should be of the same size", f"Expected 'each row of m_a must should be of the same size', but got {e}"

    # Test case 13: Rows of m_b with different sizes
    matrix
